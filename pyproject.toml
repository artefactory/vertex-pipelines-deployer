[tool.poetry]
name = "vertex-deployer"
version = "0.5.1"
description = "Check, compile, upload, run, and schedule Kubeflow Pipelines on GCP Vertex AI in a standardized manner."
authors = [
    "artefactory <jules.bertrand@artefact.com>",
    "julesbertrand  <jules.bertrand@artefact.com>"
]
license = "Apache-2.0"
homepage = "https://github.com/artefactory/vertex-pipelines-deployer"
documentation = "https://artefactory.github.io/vertex-pipelines-deployer/"
repository = "https://github.com/artefactory/vertex-pipelines-deployer"
keywords = ["kubeflow", "vertexai", "aiplatform", "gcp", "mlops", "deployer", "pipeline"]
readme = "README.md"
packages = [{include = "deployer"}]

[tool.poetry.scripts]
vertex-deployer = "deployer.cli:app"

[tool.poetry.dependencies]
python = ">=3.8, <3.11.0"
kfp = "^2.0,>=2.0.1"
google-cloud-aiplatform = "^1.26"
requests = "^2.31"
typer = "^0.12"
rich = "^13.5"
loguru = "^0.7"
pydantic-settings = "^2.0"
pydantic = "^2.3"
pyinstrument = { version = "^4.5", optional = true }
toml = "^0.10"
tomlkit = "^0.12"
jinja2 = "^3.1.3"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
pre-commit = "^3.3"
ipykernel = "^6.9"
nbstripout = "^0.7"
ruff = "^0.3"
pytest-cov = "^4.1"
codespell = "^2.2"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5"
mkdocs-material = {extras = ["pygments"], version = "^9.5.17"}

[tool.poetry.extras]
profiling = ["pyinstrument"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py38"
line-length = 99
exclude = [
    "deployer/_templates/*",
]

[tool.ruff.lint]
ignore = [
    "D100",
    "D205",
    "D415",
]
select = [
    "B",    # bugbear
    "C4",   # comprehensions
    "C90",  # mccabe
    "D",    # docstrings
    "E",    # flake8
    "F",    # flake8
    "W",    # flake8
    "S",    # bandit
    "N",    # pep8-naming
    "RUF",  # ruff
    "I",    # isort
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["vertex", "tests", "deployer"]

[tool.ruff.lint.per-file-ignores]
"*cli.py" = ["D", "B008"]
"*__init__.py" = [
    "F401",
    "D100",
    "D101",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
]
"tests/*" = ["D", "S101"]

[tool.semantic_release]
version_variables = ["deployer/__init__.py:__version__"]
version_toml = ["pyproject.toml:tool.poetry.version"]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"
commit_message = "chore(release): {version}\n\n[skip ci]\nAutomatically generated by semantic-release"
tag_format = "{version}"

[tool.semantic_release.changelog]
exclude_commit_patterns = ['''^chore\(release\).*''']

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "enh",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["build", "enh", "fix", "perf"]


[tool.vertex_deployer]
log_level = "DEBUG"

[tool.vertex_deployer.list]
with_configs = true
