name: CI

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - '*'
  workflow_call:

jobs:
  Trigger-example-ci-action:
    name: Triggering example CI action
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3 # Necessary to access local action

      - name: Trigger example CI action
        uses: ./example/.github/workflows/check_pipelines.yaml

  CI:
    name: Launching CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: make download-poetry

      - name: Set up pip cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

      - name: Set Poetry Path
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH


      - name: Install requirements
        run: |
          poetry run pip install --upgrade pip
          poetry install

      - name: Run Pre commit hooks
        run: make format-code

      - name: Run tests
        run: make run-tests

  CLI-Integration-Tests:
    name: Launching CLI Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: make download-poetry

      - name: Set up pip cache
        uses: actions/cache@v3.3.2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

      - name: Set Poetry Path
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH


      - name: Install requirements
        run: |
          poetry run pip install --upgrade pip
          poetry install

      - name: Test root command
        run: |
          cd example
          poetry run vertex-deployer --version

      - name: Test config command
        run: |
          cd example
          poetry run vertex-deployer config --all

      - name: Test list command
        run: |
          cd example
          poetry run vertex-deployer list --with-configs

      - name: Test check command
        run: |
          cd example
          poetry run vertex-deployer check --all

      - name: Test deploy command
      # Cannot check more than compile action here, need GCP environment for upload, run, schedule
        run: |
          cd example
          poetry run vertex-deployer -log DEBUG deploy dummy_pipeline --compile --env-file example.env

      - name: Test create command
        run: |
          cd example
          poetry run vertex-deployer create test_pipeline --config-type py
          [ -e example/vertex/pipelines/test_pipeline.py ] && echo 1 || echo 0
